// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql" // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth


model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    wins          Int       @default(0)
    losses        Int       @default(0)
    gamesPlayed   Int       @default(0)
    Players       Players[]
    issues        Issues[]
    lobbyOwner    Lobby?    @relation(fields: [lobbyId], references: [id])
    lobbyId       String?

    challenge Challenge[]

    friends  Friends[]  @relation(name: "friends")
    requests Requests[]

    freeGameTimeStamp Int?
    freeGameCount     Int  @default(0)

    freeChallengeTimeStamp DateTime?
    freeChallengeCount     Int @default(0)

    subscriptionId    String?
    customerId        String?
    cancelAtPeriodEnd Boolean?
    currentPeriodEnd  Int?
    Friends           Friends[]

    @@index([lobbyId])
}



enum GameType {
    MARATHON
    ELIMINATION
    SURVIVAL
}

model Lobby {
    id       String    @id @default(cuid())
    started  Boolean   @default(false)
    player   Players[]
    gameType GameType
    bot      Boolean   @default(false)
    passkey  String?
    name     String?
    User     User[]
}

model Players {
    userId    String  @unique
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    lobbyId   String
    lobby     Lobby   @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
    qualified Boolean @default(false)

    @@index([lobbyId])
}

enum IssueType {
    MARATHON
    ELIMINATION
    OTHER
}

model Issues {
    id          String    @id @default(cuid())
    createdById String
    createdBy   User      @relation(fields: [createdById], references: [id])
    issueType   IssueType
    summary     String

    @@index([createdById])
}

model Requests {
    id           String  @id @default(cuid())
    user         User    @relation(fields: [userId], references: [id])
    userId       String
    userFullName String
    userImage    String?

    friendId       String  @unique
    friendFullName String
    friendImage    String?

    accepted Boolean @default(false)

    @@index([userId])
    @@index([friendId])
}

model Friend {
    id      String    @id @default(cuid())
    friends Friends[]
}

model Friends {
    shared   Friend @relation(fields: [sharedId], references: [id], onDelete: Cascade)
    sharedId String

    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id], name: "friends", onDelete: Cascade)
    userId String

    friend   User   @relation(fields: [friendId], references: [id], onDelete: Cascade)
    friendId String

    friendImage    String?
    friendFullName String

    @@unique([userId, friendId])
    @@index([userId])
    @@index([friendId])
    @@index([sharedId])
}

model Challenge {
    id               String   @id @default(cuid())
    initiatedBy      User     @relation(fields: [initiateById], references: [id])
    initiateById     String
    timeStamp        DateTime @default(now())
    challengeesIds   String[]
    challengeesNames String[]
    started          String[]

    @@index([initiateById])
}
