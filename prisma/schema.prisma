// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql" // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    wins          Int       @default(0)
    losses        Int       @default(0)
    gamesPlayed   Int       @default(0)
    Players       Players[]
    issues        Issues[]
    lobbyOwner    Lobby?    @relation(fields: [lobbyId], references: [id])
    lobbyId       String?

    Notifications Notification[]

    friends  Friends[]
    requests Requests[]

    freeGameTimeStamp Int?
    freeGameCount     Int  @default(0)

    subscriptionId    String?
    customerId        String?
    cancelAtPeriodEnd Boolean?
    currentPeriodEnd  Int?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum GameType {
    MARATHON
    ELIMINATION
    SURVIVAL
}

model Lobby {
    id       String    @id @default(cuid())
    started  Boolean   @default(false)
    player   Players[]
    gameType GameType
    bot      Boolean   @default(false)
    passkey  String?
    name     String?
    User     User[]
}

model Players {
    userId    String  @unique
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    lobbyId   String
    lobby     Lobby   @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
    qualified Boolean @default(false)

    @@index([lobbyId])
}

enum IssueType {
    MARATHON
    ELIMINATION
    OTHER
}

model Issues {
    id          String    @id @default(cuid())
    createdById String
    createdBy   User      @relation(fields: [createdById], references: [id])
    issueType   IssueType
    summary     String

    @@index([createdById])
}

model Requests {
    id           String @id @default(cuid())
    user         User   @relation(fields: [userId], references: [id])
    userId       String
    userFullName String

    friendId       String @unique
    friendFullName String

    accepted Boolean @default(false)

    @@index([userId])
    @@index([friendId])
}

model Friends {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String

    friendFullName String
    friendId       String

    @@index([userId])
}

model Challenge {
    id                String @id @default(cuid())
    challenger        String
    challengee        String
    word              String
    challengerGuesses Json
    challengeeGuesses Json
}

enum NotificationType {
    FRIENDREQUEST
    CHALLENGE
}

model Notification {
    id     String           @id @default(cuid())
    user   User             @relation(fields: [userId], references: [id])
    userId String
    type   NotificationType
    body   String

    relatedId String

    read Boolean @default(false)

    @@index([userId])
}
